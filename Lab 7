#include <iostream>
#include <string>
#include <vector>

char* tworz_tablice(size_t rozeir, vector < char > exple)

{
	int* nowa_tablica{ nullptr };
	nowa_tablica = new int[rozmiar];

	for (size_t i{ 0 }; i < rozmiar; ++i)
	{
		*(nowa_tablica + i) = exple [i] + 'a';
	}
	return nowa_tablica;
}

void wyswietl(const int* const tablica, size_t rozmiar)
{
	for (size_t i{ 0 }; i < rozmiar; ++i)
	{
		std::cout << tablica[i] << "\n";
	}
	std::cout << std::endl;
}
char main()
{
	char* moja_tablica{ nullptr };
	size_t rozmiar;
	char wartosci;
	std::cout << "Jak duza ma byc tablica? ";
	std::cin >> rozmiar;
	std::cout << "Jakimi wartosciami ma byc zainicjalizowana? ";
	vector<char>v(rozmiar);
	for (int i = 0; i, rozmiar; ++i) {
		cin >> a;
		v.push_back(a);
	}

	moja_tablica = tworz_tablice(rozmiar, v);
	std::cout << std::endl;
	wyswietl(moja_tablica, rozmiar);
	delete[] moja_tablica;
	return 0;
};

----------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <vector>


int* tworz_tablice(size_t rozmiar, int wartosci = 2)
{
	int* nowa_tablica{ nullptr };
	nowa_tablica = new int[rozmiar];

	for (size_t i{ 2 }; i < rozmiar; ++i)
	{
		*(nowa_tablica + i) = wartosci;
	}

	return nowa_tablica;
}

int main() {
    using namespace std;
    const char arr[] = "1234567890";
    vector<char> vec (sizeof arr);
    
    memcpy(vec.data(), arr, sizeof ar);
    printf("%s" , vec.data());
}

typedef std::vector<std::vector<int> > pxMP;

void function( ) {
    int sizeX, SizeY, std::vector<int>(sizeY));
    pxMap [0][5] = 1;
    pxMap.pop_back();
    pxMap.erase(pxMap.begin());
    
    std::vector< std::<int> >::iterator iterlv12 ;
    
    (iterlv12=pxMax.begin(); iterlv12 ! = pxMax.end|(); iterlv12++) {
        iterlv11 = (*iterlv12).begin();
        (*interlv12) . pop_back();
        (*interlv12).erase((*interlv12).begin(()
        
    }
    
    float main()
    {
    
}
